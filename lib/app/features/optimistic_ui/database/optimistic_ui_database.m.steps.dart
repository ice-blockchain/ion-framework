// SPDX-License-Identifier: ice License 1.0

// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema1 extends i0.VersionedSchema {
  Schema1({required super.database}) : super(version: 1);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    userSentLikesTable,
  ];
  late final Shape0 userSentLikesTable = Shape0(
      source: i0.VersionedTable(
        entityName: 'user_sent_likes_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(event_reference)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get eventReference =>
      columnsByName['event_reference']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sentAt =>
      columnsByName['sent_at']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get status =>
      columnsByName['status']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('event_reference', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>('sent_at', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('status', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'pending\''));

i0.MigrationStepWithVersion migrationSteps() {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 0:
        final schema = Schema1(database: database);
        final migrator = i1.Migrator(database, schema);
        await migrator.createAll();
        return 1;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep() =>
    i0.VersionedSchema.stepByStepHelper(step: migrationSteps());