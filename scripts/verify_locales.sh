#!/bin/bash

# This script verifies that all localization keys exist in all language files.
# It checks the untranslated_messages.txt file generated by Flutter's gen-l10n.
#
# Usage:
# ./scripts/verify_locales.sh [--strict]
#
# Parameters:
# --strict    Exit with error code if missing keys are found (useful for CI)
#
# Examples:
# ./scripts/verify_locales.sh
# ./scripts/verify_locales.sh --strict

set -e

# Default values
STRICT_MODE=false
UNTRANSLATED_FILE="untranslated_messages.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --strict)
      STRICT_MODE=true
      shift
      ;;
    -h|--help)
      echo "Usage: $0 [--strict]"
      echo ""
      echo "Options:"
      echo "  --strict    Exit with error code if missing keys are found"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

echo -e "${BLUE}=== Localization Verification ===${NC}"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
  echo -e "${YELLOW}Warning: jq is required to parse the untranslated messages file${NC}"
  echo "Please install jq:"
  echo "  macOS: brew install jq"
  echo "  Linux: apt-get install jq"
  exit 1
fi

# Check if the untranslated messages file exists
if [ ! -f "$UNTRANSLATED_FILE" ]; then
  echo -e "${YELLOW}Warning: $UNTRANSLATED_FILE not found${NC}"
  echo "Make sure to run './scripts/generate_locales.sh' first"
  exit 1
fi

# Check if file is empty or contains empty JSON (all translations complete)
if [ ! -s "$UNTRANSLATED_FILE" ] || [ "$(jq 'length' "$UNTRANSLATED_FILE" 2>/dev/null)" == "0" ]; then
  echo -e "${GREEN}✅ All translations are complete!${NC}"
  exit 0
fi

# Read languages from l10n.yaml or detect from .arb files
ARB_DIR="lib/l10n"
LANGUAGES=()

if [ -d "$ARB_DIR" ]; then
  for arb_file in "$ARB_DIR"/app_*.arb; do
    if [ -f "$arb_file" ] && [ "$(basename "$arb_file")" != "app_en.arb" ]; then
      lang=$(basename "$arb_file" .arb | sed 's/app_//')
      LANGUAGES+=("$lang")
    fi
  done
fi

echo "Checking languages: ${LANGUAGES[*]}"
echo ""

# Check for missing translations for each language
HAS_MISSING=false
total_missing=0

for lang in "${LANGUAGES[@]}"; do
  # Get the count of missing keys for this language from the JSON file
  count=$(jq -r ".[\"$lang\"] | length" "$UNTRANSLATED_FILE" 2>/dev/null || echo 0)
  
  if [ "$count" != "null" ] && [ "$count" -gt 0 ]; then
    HAS_MISSING=true
    total_missing=$((total_missing + count))
    echo -e "${RED}❌ Language '$lang': $count missing translations${NC}"
  else
    echo -e "${GREEN}✅ Language '$lang': Complete${NC}"
  fi
done

echo ""

# Show details if there are missing translations
if [ "$HAS_MISSING" = true ]; then
  echo -e "${YELLOW}=== Missing Translation Details ===${NC}"
  echo ""
  
  for lang in "${LANGUAGES[@]}"; do
    count=$(jq -r ".[\"$lang\"] | length" "$UNTRANSLATED_FILE" 2>/dev/null || echo 0)
    
    if [ "$count" != "null" ] && [ "$count" -gt 0 ]; then
      echo -e "${BLUE}Language: $lang (${count} missing keys)${NC}"
      
      # Show first 20 missing keys
      jq -r ".[\"$lang\"][]" "$UNTRANSLATED_FILE" 2>/dev/null | head -20 | while read -r key; do
        echo "  - $key"
      done
      
      if [ "$count" -gt 20 ]; then
        echo "  ... and $((count - 20)) more"
      fi
      echo ""
    fi
  done
  
  echo "Full details available in: $UNTRANSLATED_FILE"
  echo ""
fi

# Exit with error in strict mode if there are missing keys
if [ "$STRICT_MODE" = true ] && [ "$HAS_MISSING" = true ]; then
  echo -e "${RED}❌ Verification failed: $total_missing missing translations found${NC}"
  exit 1
fi

if [ "$HAS_MISSING" = false ]; then
  echo -e "${GREEN}✅ All translations are complete!${NC}"
else
  echo -e "${YELLOW}⚠️  Some translations are incomplete${NC}"
  echo "Check $UNTRANSLATED_FILE for details"
fi

exit 0
